{"version":3,"sources":["components/SearchForm.js","components/Header.js","components/SortTypeDropdown.js","components/NewsPreviewList.js","components/loading/LoadingContainer.js","containers/NewsPreviewContainer.js","containers/MainContainer.js","redux/actions/storeActions.js"],"names":["SearchForm","props","changeHandler","searchKeywords","searchKeyPress","keyword","className","name","placeholder","onChange","onKeyPress","e","autoFocus","onClick","disabled","Header","Navbar","expand","fixed","Row","Col","xs","md","NavbarBrand","href","SortTypeDropdown","useState","dropdownOpen","setDropdownOpen","changeSortType","sortType","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","NewsPreviewList","author","desciption","publishedDate","sourceId","sourceName","title","url","urlToImage","formatDate","moment","format","firstChar","Fragment","Card","tag","target","CardHeader","CardBody","CardImg","top","width","src","alt","LoadingContainer","this","loading","LoadingSpinner","children","Component","defaultProps","NewsPreviewContainer","currentNewsData","totalResults","ajaxStatus","newsData","_","uniqBy","lg","isLoading","map","item","index","key","description","publishedAt","source","id","MainContainer","scrollToloadMoreNews","scrolled","document","body","scrollTop","documentElement","scrollHeight","clientHeight","setState","theposition","pageSize","pageIndex","state","loadMoreNews","onScrollingResult","throttle","fetchCurrentNews","keycode","preventDefault","value","window","addEventListener","isServerError","Alert","color","serverMessage","onScroll","ref","connect","store","dispatch","a","apiKeyword","replace","newsUrl","apiConfig","news","API_URL","PARAM","PAGE_SIZE","API_KEY","type","RESET_NEWS_RESULTS","FETCH_PENDING","axios","get","response","filteredData","data","articles","slice","RECORD_COUNT","FETCH_CURRENT_NEWS","totalPage","length","FETCH_COMPLETE","console","log","SERVER_ERROR","serverStatus","status","message","startRecord","endRecord","FETCH_MORE_NEWS"],"mappings":"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","file":"static/js/4.f5ffc58a.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchForm = props => {\n    const { changeHandler, searchKeywords, searchKeyPress, keyword } = props;\n    return ( \n        <div className=\"searchForm\">\n            <input name=\"keyword\" placeholder=\"Search\" \n                onChange={changeHandler} \n                onKeyPress={(e) => searchKeyPress(e)}\n                autoFocus\n            />\n            <button \n                onClick={searchKeywords}\n                disabled={!keyword}> <i className=\"fas fa-search\"></i> </button>\n        </div>\n    );\n}\n \nexport default SearchForm;","import React from 'react';\nimport { Navbar, NavbarBrand, Row, Col } from 'reactstrap';\nimport SearchForm from '../components/SearchForm';\n\nconst Header = props => {\n    const {changeHandler, searchKeyPress, searchKeywords, keyword} = props;\n\n    return ( \n        <Navbar expand=\"md\" fixed=\"top\">\n            <Row>\n                <Col xs=\"4\" md=\"7\">\n                    <NavbarBrand href=\"/\">US News</NavbarBrand>\n                </Col>\n                <Col xs=\"8\" md=\"5\">\n                    <SearchForm\n                        changeHandler={changeHandler}\n                        searchKeywords={searchKeywords}\n                        searchKeyPress={searchKeyPress}\n                        keyword={keyword}\n                    />\n                </Col>\n            </Row>\n        </Navbar>\n    );\n}\n\nexport default Header;\n\n","import React, { useState } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nconst SortTypeDropdown = props => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n  const {changeSortType, sortType} = props;\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n      <DropdownToggle caret>\n        Sort By: <span>{sortType}</span>\n        </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem onClick={() => changeSortType('publishedAt')}>Published At</DropdownItem>\n        <DropdownItem onClick={() => changeSortType('relevancy')}>Relevancy</DropdownItem>\n        <DropdownItem onClick={() => changeSortType('popularity')}>Popularity</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}\n\nexport default SortTypeDropdown;","import React from 'react';\nimport { Card, CardHeader, CardBody, CardImg, Row, Col } from 'reactstrap';\nimport moment from 'moment';\n  \nconst NewsPreviewList = props => {\n    const {author,desciption,publishedDate,sourceId,sourceName,title,url,urlToImage} = props;\n    let formatDate = moment(publishedDate).format('YYYY-MM-DD HH:mm');\n    let firstChar = '';\n\n    switch(sourceId) { \n        case 'the-new-york-times': { \n           firstChar = 'NT'\n           break; \n        } \n        case 'the-washington-post': { \n            firstChar = 'WP'\n           break; \n        }\n        default: \n            firstChar = 'NT'\n    }    \n\n    return ( \n      <React.Fragment>\n            <Card tag=\"a\" className=\"newsPreview\" href={url} target=\"_blank\">\n                <CardHeader>\n                    <Row>\n                        <Col xs=\"auto\">\n                            <div className=\"profile\">\n                                {firstChar}\n                            </div>\n                        </Col>\n                        <Col xs=\"9\">\n                            {sourceName && <b>{sourceName}</b>}<br/>\n                            <small>{formatDate}</small>\n                        </Col>\n                    </Row>\n                </CardHeader>\n                <CardBody>\n                    <div className=\"headerImg\">\n                        {urlToImage && <CardImg top width=\"100%\" src={urlToImage} alt={title} />}\n                    </div>\n                    <CardBody>\n                        {title && <h5>{title}</h5>}\n                        {author && <p className=\"author\">By <b>{author}</b></p>}\n                        {desciption && <p>{desciption}</p>}\n                    </CardBody>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )    \n}\n \nexport default NewsPreviewList","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from './LoadingSpinner';\n\nclass LoadingContainer extends Component {\n  static propTypes = {\n    loading: PropTypes.bool,\n    children: PropTypes.node.isRequired\n  }\n\n  static defaultProps = {\n    loading: false\n  }\n\n  render() {\n    return (\n        <React.Fragment>\n            {this.props.loading ? <LoadingSpinner /> : this.props.children}\n        </React.Fragment>\n    );\n  }\n}\nexport default LoadingContainer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'reactstrap';\nimport _ from 'lodash';\nimport SortTypeDropdown from '../components/SortTypeDropdown';\nimport NewsPreviewList from '../components/NewsPreviewList'; \nimport LoadingContainer from '../components/loading/LoadingContainer';\n\nclass NewsPreviewContainer extends Component {\n\n    static propTypes = {\n        currentNewsData: PropTypes.array.isRequired,\n        changeSortType: PropTypes.func.isRequired,\n        sortType: PropTypes.string.isRequired\n    };\n\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        const { keyword, currentNewsData, totalResults, ajaxStatus, changeSortType, sortType } = this.props;\n        let newsData =  _.uniqBy(currentNewsData, 'title');\n        \n        return (\n            <React.Fragment>\n                <Row>\n                    <Col xs=\"12\" lg=\"6\">\n                        <h4 className=\"heading\">\n                            {totalResults > 0 && <React.Fragment>\n                                {keyword && <React.Fragment>\n                                    {totalResults} news match \"{keyword}\"\n                                </React.Fragment>}\n                                {!keyword && <React.Fragment>\n                                    Total: <b>{totalResults}</b> news\n                                </React.Fragment>}\n                            </React.Fragment>}\n                            {!totalResults && !ajaxStatus.isLoading && <span>No Result was found!</span>}\n                        </h4>\n                    </Col>\n                    <Col xs=\"12\" lg=\"6\">\n                        <SortTypeDropdown \n                            changeSortType={changeSortType}\n                            sortType={sortType}\n                        />\n                    </Col>\n                </Row>\n                \n                {newsData && <div className=\"newsPreviewContainer\">\n                    {newsData.map((item, index) =>{\n                            return(\n                                <NewsPreviewList\n                                    key={index}\n                                    author={item.author}\n                                    desciption={item.description}\n                                    publishedDate={item.publishedAt}\n                                    sourceId={item.source.id}\n                                    sourceName={item.source.name}\n                                    title={item.title}\n                                    url={item.url}\n                                    urlToImage={item.urlToImage}\n                                />\n                            )\n                        })\n                    }\n                    {ajaxStatus && <LoadingContainer loading={ajaxStatus.isLoading} />}\n                </div>}\n            </React.Fragment>\n         );\n    }\n}\n \nexport default NewsPreviewContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Alert,  } from 'reactstrap';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { fetchCurrentNews, loadMoreNews } from '../redux/actions/storeActions';\nimport Header from '../components/Header';\nimport NewsPreviewContainer from './NewsPreviewContainer';\n\nexport class MainContainer extends Component {\n    static propTypes = {\n        ajaxStatus: PropTypes.object.isRequired,\n        fetchCurrentNews: PropTypes.func.isRequired,\n        loadMoreNews: PropTypes.func.isRequired\n    };\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            keyword: '',\n            pageIndex: 1,\n            sortType: 'publishedAt'\n        }\n    }\n\n    componentDidMount() {\n        const {keyword, sortType} = this.state;\n        const {pageIndex} = this.props;\n\n        this.props.fetchCurrentNews(\n            keyword, \n            sortType, \n            pageIndex\n        );\n        window.addEventListener('scroll', _.throttle(this.scrollToloadMoreNews, 10), false);\n    }\n\n    scrollToloadMoreNews = () => {\n        const winScroll =\n          document.body.scrollTop || document.documentElement.scrollTop\n      \n        const height =\n          document.documentElement.scrollHeight -\n          document.documentElement.clientHeight\n      \n        const scrolled = winScroll / height\n      \n        this.setState({\n          theposition: scrolled,\n        })\n\n        if (scrolled === 1 && this.props.totalResults > this.props.pageSize){\n            let pageIndex = this.props.pageIndex + 1;\n            const {sortType} = this.state;\n            const {keyword} = this.props;\n            this.props.loadMoreNews(\n                keyword, \n                sortType, \n                pageIndex\n            );\n        }\n    }\n\n    onScrollingResult = (e) => {\n        _.throttle(this.scrollToloadMoreNews, 100)(); //iPad & mobile scroll\n    };\n\n    searchKeywords = () => {\n        const {keyword, sortType, pageIndex} = this.state;\n        this.props.fetchCurrentNews(\n            keyword, \n            sortType, \n            pageIndex\n        );\n        this.setState({\n            keyword: ''\n        })\n    }\n\n    searchKeyPress = (e) => {\n        if (e.keycode === 13 || e.key === 'Enter'){\n            const {keyword, sortType, pageIndex} = this.state;\n            this.props.fetchCurrentNews(\n                keyword, \n                sortType, \n                pageIndex\n            );\n\n            this.setState({\n                keyword: ''\n            })\n        }\n    }\n\n    changeHandler = (e) =>{\n        e.preventDefault();\n        let keyword = e.target.value;  //get the value from the input\n        this.setState({\n            keyword\n        });\n    }\n\n    //Change Sort Type\n    changeSortType = (sortType) => {\n        this.setState({\n            sortType\n        });\n        const {keyword} = this.state;\n        const {pageIndex} = this.props;\n        this.props.fetchCurrentNews(\n            keyword, \n            sortType, \n            pageIndex\n        );\n    }\n\n    render() {\n        const { ajaxStatus, currentNewsData, totalResults, keyword } = this.props;\n\n        return (\n            <React.Fragment>\n                <Header\n                    changeHandler={this.changeHandler}\n                    searchKeywords={this.searchKeywords}\n                    searchKeyPress={this.searchKeyPress}\n                    keyword={this.state.keyword} //check input field\n                />\n                <div className=\"container\">\n                    {ajaxStatus.isServerError === true && <Alert color=\"danger\">\n                        {ajaxStatus.serverMessage}\n                    </Alert>}\n                    <div className=\"dashboard\" onScroll={this.onScrollingResult} ref=\"newsScroll\">\n                        {currentNewsData && <NewsPreviewContainer\n                            ajaxStatus={ajaxStatus}\n                            keyword={keyword}\n                            totalResults={totalResults}\n                            currentNewsData={currentNewsData}\n                            changeSortType={this.changeSortType}\n                            sortType={this.state.sortType}\n                        />}\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n\n    // console.log(state);\n\n    return {\n        ajaxStatus: state.ajaxStatus,\n        currentNewsData: state.store.currentNewsData,\n        keyword: state.store.keyword,\n        totalResults: state.store.totalResults,\n        pageIndex: state.store.pageIndex,\n        pageSize: state.store.pageSize\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { \n        fetchCurrentNews,\n        loadMoreNews\n    }\n)(MainContainer);\n","import {\n    FETCH_COMPLETE,\n    FETCH_PENDING,\n    SERVER_ERROR,\n    RESET_STATUS\n} from '../reducers/ajaxStatusReducer';\nimport {\n    RESET_NEWS_RESULTS,\n    FETCH_CURRENT_NEWS,\n    FETCH_MORE_NEWS,\n    PAGEINDEX_REQUESTED\n} from '../reducers/storeReducer';\nimport axios from 'axios';\nimport apiConfig from './config';\n\n//Get Current Forecast, default is Hong Kong\n\nexport function fetchCurrentNews(keyword,\n                                sortType,\n                                pageIndex) {\n    return async dispatch => {\n        const apiKeyword = keyword.replace(/\\s/g, \"+\");\n        let newsUrl = `${apiConfig.news.API_URL}everything?q=${apiKeyword}&${apiConfig.news.PARAM}&pageSize=${apiConfig.news.PAGE_SIZE}&sortBy=${sortType}&apiKey=${apiConfig.news.API_KEY}`;\n        // console.log(newsUrl);\n        dispatch({\n            type: RESET_NEWS_RESULTS\n        });\n\n        dispatch({\n            type: FETCH_PENDING\n        });\n\n        try {\n            const response = await axios.get(newsUrl);\n            let filteredData = response.data.articles.slice(0, apiConfig.news.RECORD_COUNT);\n\n            if (filteredData){\n                dispatch({\n                    type: FETCH_CURRENT_NEWS,\n                    currentNewsData: filteredData || {},\n                    keyword: keyword,\n                    totalResults: response.data.totalResults,\n                    totalPage: response.data.articles.length / apiConfig.news.PAGE_SIZE,\n                    pageIndex: 1,\n                    pageSize: apiConfig.news.PAGE_SIZE\n                });\n    \n                dispatch({\n                    type: FETCH_COMPLETE\n                });\n            }\n        } catch (error) {\n\n            console.log(\"error: \" + error);\n\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\nexport function loadMoreNews(keyword,\n    sortType,\n                            pageIndex) {\n    return async dispatch => {\n        const apiKeyword = keyword.replace(/\\s/g, \"+\");\n        let newsUrl = `${apiConfig.news.API_URL}everything?q=${apiKeyword}&${apiConfig.news.PARAM}&pageSize=${apiConfig.news.PAGE_SIZE}&sortBy=${sortType}&apiKey=${apiConfig.news.API_KEY}`;\n\n        dispatch({\n            type: FETCH_PENDING\n        });\n\n        // console.log(\"loadMore: \" + keyword + \", \" + sortBy + \", \" + pageIndex);\n\n        try {\n            const response = await axios.get(newsUrl);\n\n            let startRecord = (pageIndex - 1) * apiConfig.news.RECORD_COUNT;\n            let endRecord = pageIndex * apiConfig.news.RECORD_COUNT;\n            let filteredData = response.data.articles.slice(startRecord, endRecord);\n\n            // console.log(\"startRecord: \" + startRecord + \"; endRecord: \" + endRecord);\n\n            if (filteredData){\n                dispatch({\n                    type: FETCH_MORE_NEWS,\n                    keyword: keyword,\n                    pageIndex: pageIndex,\n                    currentNewsData: filteredData || {},\n                });\n\n                dispatch({\n                    type: FETCH_COMPLETE\n                });\n            }\n        } catch (error) {\n\n            console.log(\"error: \" + error);\n\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\nexport function storePageRequested(pageIndex) {\n    return async dispatch => {\n        dispatch({\n            type: PAGEINDEX_REQUESTED,\n            pageRequested: pageIndex\n        })\n    }\n}\n\nexport function resetAjaxStatus() {\n    return (dispatch) => {\n        dispatch({\n            type: RESET_STATUS\n        })\n    }\n}"],"sourceRoot":""}